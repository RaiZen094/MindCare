name: 🔍 Debug Deployment Issues

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      test_type:
        description: 'What to test'
        required: true
        default: 'secrets'
        type: choice
        options:
        - secrets
        - backend
        - frontend
        - full

jobs:
  debug-secrets:
    name: 🔍 Debug Secrets
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'secrets' || github.event.inputs.test_type == 'full'
    
    steps:
    - name: 🔍 Check Secrets Configuration
      run: |
        echo "🔍 Checking secret configuration..."
        
        # Check Render secrets
        if [ -n "${{ secrets.RENDER_API_KEY }}" ]; then
          echo "✅ RENDER_API_KEY is set (length: ${#RENDER_API_KEY})"
        else
          echo "❌ RENDER_API_KEY is not set"
        fi
        
        if [ -n "${{ secrets.RENDER_SERVICE_ID }}" ]; then
          echo "✅ RENDER_SERVICE_ID is set: ${{ secrets.RENDER_SERVICE_ID }}"
        else
          echo "❌ RENDER_SERVICE_ID is not set"
        fi
        
        # Check Vercel secrets
        if [ -n "${{ secrets.VERCEL_TOKEN }}" ]; then
          echo "✅ VERCEL_TOKEN is set (length: ${#VERCEL_TOKEN})"
        else
          echo "❌ VERCEL_TOKEN is not set"
        fi
        
        if [ -n "${{ secrets.VERCEL_ORG_ID }}" ]; then
          echo "✅ VERCEL_ORG_ID is set: ${{ secrets.VERCEL_ORG_ID }}"
        else
          echo "❌ VERCEL_ORG_ID is not set"
        fi
        
        if [ -n "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
          echo "✅ VERCEL_PROJECT_ID is set: ${{ secrets.VERCEL_PROJECT_ID }}"
        else
          echo "❌ VERCEL_PROJECT_ID is not set"
        fi
        
        echo ""
        echo "🎯 Next steps:"
        echo "1. Ensure all secrets are properly configured"
        echo "2. Check secret values don't have extra spaces"
        echo "3. Verify API keys are active and have correct permissions"

  debug-backend:
    name: 🔍 Debug Backend Build
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'backend' || github.event.inputs.test_type == 'full'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: 🔍 Debug Maven Wrapper
      run: |
        cd backend
        echo "📁 Backend directory contents:"
        ls -la
        
        echo ""
        echo "🔍 Maven wrapper details:"
        ls -la mvnw* || echo "No Maven wrapper files found"
        
        echo ""
        echo "🔍 Making mvnw executable:"
        chmod +x mvnw
        ls -la mvnw
    
    - name: 🧪 Test Maven Wrapper
      run: |
        cd backend
        echo "🧪 Testing Maven wrapper..."
        ./mvnw --version
        echo "✅ Maven wrapper is working!"
    
    - name: 🏗️ Test Backend Build
      run: |
        cd backend
        echo "🏗️ Testing backend compilation..."
        ./mvnw clean compile --batch-mode --no-transfer-progress
        echo "✅ Backend compilation successful!"

  debug-frontend:
    name: 🔍 Debug Frontend Build
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'frontend' || github.event.inputs.test_type == 'full'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: 🔍 Debug Frontend Setup
      run: |
        cd frontend
        echo "📁 Frontend directory contents:"
        ls -la
        
        echo ""
        echo "📦 Package.json scripts:"
        cat package.json | grep -A 10 '"scripts"'
        
        echo ""
        echo "🔍 Node and npm versions:"
        node --version
        npm --version
    
    - name: 📦 Test Dependencies Install
      run: |
        cd frontend
        echo "📦 Installing dependencies..."
        npm ci
        echo "✅ Dependencies installed successfully!"
    
    - name: 🏗️ Test Frontend Build
      run: |
        cd frontend
        echo "🏗️ Testing frontend build..."
        npm run build
        echo "✅ Frontend build successful!"
      env:
        NEXT_PUBLIC_API_URL: https://mindcare-backend-uyos.onrender.com/api

  debug-summary:
    name: 📋 Debug Summary
    needs: [debug-secrets, debug-backend, debug-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📋 Debug Results
      run: |
        echo "🎯 Debug Results Summary"
        echo "========================"
        echo "Secrets Check: ${{ needs.debug-secrets.result }}"
        echo "Backend Build: ${{ needs.debug-backend.result }}"
        echo "Frontend Build: ${{ needs.debug-frontend.result }}"
        echo ""
        
        if [ "${{ needs.debug-secrets.result }}" == "success" ] && \
           [ "${{ needs.debug-backend.result }}" == "success" ] && \
           [ "${{ needs.debug-frontend.result }}" == "success" ]; then
          echo "✅ 🎉 All debug tests passed!"
          echo "You can now run the full deployment pipeline."
        else
          echo "❌ Some debug tests failed. Check the logs above."
          echo ""
          echo "🔧 Troubleshooting steps:"
          echo "1. Fix any failing tests above"
          echo "2. Ensure all GitHub secrets are configured"
          echo "3. Verify API keys and project IDs are correct"
          echo "4. Re-run this debug workflow"
        fi
