name: 🚀 Deploy MindCare Application

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/workflows/test-pipeline.yml'

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-backend:
    name: 🧪 Test Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: 🔧 Setup Maven wrapper
        run: |
          cd backend
          chmod +x mvnw
      - name: 🧪 Tests (non-blocking)
        run: |
          cd backend
          ./mvnw clean test --batch-mode --no-transfer-progress || echo "tests failed"
      - name: 🏗️ Build
        run: |
          cd backend
          ./mvnw clean package -DskipTests --batch-mode --no-transfer-progress

  test-frontend:
    name: 🧪 Test Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: 📦 Install
        working-directory: frontend
        run: npm ci
      - name: 🧹 Lint (non-blocking)
        working-directory: frontend
        run: npm run lint || echo "lint skipped"
      - name: 🏗️ Build
        working-directory: frontend
        env:
          NEXT_PUBLIC_API_URL: https://mindcare-backend-uyos.onrender.com/api
        run: npm run build

  deploy-backend:
    name: 🚀 Deploy Backend (Render)
    needs: [test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: ✅ Check secret
        run: |
          [ -n "${{ secrets.RENDER_DEPLOY_HOOK }}" ] || { echo "Missing RENDER_DEPLOY_HOOK"; exit 1; }
      - name: 🔔 Trigger Render deploy
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}")
          echo "Render HTTP: $code"
          if [ "$code" -lt 200 ] || [ "$code" -ge 300 ]; then exit 1; fi
      - name: 🏥 Health check
        run: |
          echo "wait 60s"; sleep 60
          for i in {1..15}; do
            if curl -fsS --max-time 10 https://mindcare-backend-uyos.onrender.com/api/auth/health >/dev/null; then
              echo "backend healthy"; exit 0; fi
            sleep 20
          done
          exit 1

  deploy-frontend:
    name: 🚀 Deploy Frontend (Vercel)
    needs: [test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: ✅ Check required secrets
        run: |
          [ -n "${{ secrets.VERCEL_DEPLOY_HOOK }}" ] || { echo "Missing VERCEL_DEPLOY_HOOK"; exit 1; }
          [ -n "${{ secrets.VERCEL_TOKEN }}" ] || { echo "Missing VERCEL_TOKEN"; exit 1; }
          [ -n "${{ secrets.VERCEL_PROJECT_ID }}" ] || { echo "Missing VERCEL_PROJECT_ID"; exit 1; }

      - name: 🔔 Trigger Vercel deploy (production)
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${{ secrets.VERCEL_DEPLOY_HOOK }}")
          echo "Vercel hook HTTP: $code"
          if [ "$code" -lt 200 ] || [ "$code" -ge 300 ]; then exit 1; fi

      - name: ⏳ Wait for Vercel to be READY
        run: |
          sudo apt-get update -y >/dev/null && sudo apt-get install -y jq >/dev/null
          TOKEN='${{ secrets.VERCEL_TOKEN }}'
          PROJECT='${{ secrets.VERCEL_PROJECT_ID }}'
          for i in {1..30}; do
            json=$(curl -s -H "Authorization: Bearer $TOKEN" \
                   "https://api.vercel.com/v13/deployments?projectId=$PROJECT&target=production&limit=1")
            state=$(echo "$json" | jq -r '.deployments[0].state // empty')
            url=$(echo "$json"   | jq -r '.deployments[0].url   // empty')
            echo "Attempt $i: state=$state url=$url"
            if [ "$state" = "READY" ]; then
              echo "Frontend ready: https://$url"; exit 0; fi
            if [ "$state" = "ERROR" ] || [ -z "$state" ]; then
              echo "$json" | jq .; exit 1; fi
            sleep 10
          done
          echo "Timed out"; exit 1

  integration-tests:
    name: 🧪 Integration
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Check API
        run: curl -f https://mindcare-backend-uyos.onrender.com/api/auth/health
      - name: Check Web
        run: curl -f https://mind-care-zeta.vercel.app
